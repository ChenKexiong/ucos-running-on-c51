C51 COMPILER V9.51   OS_Q                                                                  02/25/2015 10:39:19 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE OS_Q
OBJECT MODULE PLACED IN .\Output\os_q.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE Source\os_q.c BROWSE INCDIR(.\Source) DEBUG OBJECTEXTEND PRINT(.\List\os_q.
                    -lst) TABS(2) OBJECT(.\Output\os_q.obj)

line level    source

   1          /*
   2          *********************************************************************************************************
   3          *                                                uC/OS-II
   4          *                                          The Real-Time Kernel
   5          *                                        MESSAGE QUEUE MANAGEMENT
   6          *
   7          *                              (c) Copyright 1992-2009, Micrium, Weston, FL
   8          *                                           All Rights Reserved
   9          *
  10          * File    : OS_Q.C
  11          * By      : Jean J. Labrosse
  12          * Version : V2.91
  13          *
  14          * LICENSING TERMS:
  15          * ---------------
  16          *   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
  17          * If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license
  18          * its use in your product. We provide ALL the source code for your convenience and to help you experience
  19          * uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
  20          * licensing fee.
  21          *********************************************************************************************************
  22          */
  23          
  24          #ifndef  OS_MASTER_FILE
  25          #include <ucos_ii.h>
*** WARNING C318 IN LINE 44 OF .\Source\ucos_ii.h: can't open file 'app_cfg.h'
*** WARNING C318 IN LINE 45 OF .\Source\ucos_ii.h: can't open file 'os_cfg.h'
*** WARNING C322 IN LINE 72 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 81 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 170 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 345 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 351 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 351 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 351 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 351 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 351 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 351 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 372 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 372 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 419 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 433 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 433 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 463 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 479 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 506 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 520 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 537 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 548 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 548 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 548 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 548 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 548 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 552 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 552 OF .\Source\ucos_ii.h: unknown identifier
C51 COMPILER V9.51   OS_Q                                                                  02/25/2015 10:39:19 PAGE 2   

*** WARNING C322 IN LINE 552 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 552 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 552 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 552 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 556 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 556 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 556 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 560 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 560 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 577 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 581 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 589 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 593 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 605 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 646 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 646 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 646 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 646 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 646 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 646 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 651 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 651 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 656 OF .\Source\ucos_ii.h: unknown identifier
*** ERROR C202 IN LINE 672 OF .\Source\ucos_ii.h: 'OS_LOWEST_PRIO': undefined identifier
*** ERROR C136 IN LINE 672 OF .\Source\ucos_ii.h: invalid dimension size: [0]
*** ERROR C202 IN LINE 684 OF .\Source\ucos_ii.h: 'OS_TASK_IDLE_STK_SIZE': undefined identifier
*** ERROR C136 IN LINE 684 OF .\Source\ucos_ii.h: invalid dimension size: [0]
*** ERROR C202 IN LINE 691 OF .\Source\ucos_ii.h: 'OS_LOWEST_PRIO': undefined identifier
*** ERROR C136 IN LINE 691 OF .\Source\ucos_ii.h: invalid dimension size: [0]
*** ERROR C202 IN LINE 692 OF .\Source\ucos_ii.h: 'OS_MAX_TASKS': undefined identifier
*** ERROR C136 IN LINE 692 OF .\Source\ucos_ii.h: invalid dimension size: [0]
*** WARNING C322 IN LINE 694 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 698 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 698 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 703 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 703 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 708 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 712 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 743 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 743 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 743 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 743 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 743 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 771 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 771 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 823 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 870 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 870 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 904 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 940 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 940 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 999 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1044 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1049 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1056 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1068 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1073 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1083 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1088 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1088 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1093 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1100 OF .\Source\ucos_ii.h: unknown identifier
C51 COMPILER V9.51   OS_Q                                                                  02/25/2015 10:39:19 PAGE 3   

*** WARNING C322 IN LINE 1120 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1127 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1131 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1144 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1193 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1212 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1216 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1216 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1216 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1216 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1216 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1237 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1237 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1249 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1249 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1253 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1259 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1259 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1259 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1259 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1267 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1271 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1271 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1277 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1277 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1289 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1301 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1321 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1327 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1339 OF .\Source\ucos_ii.h: unknown identifier
*** ERROR C320 IN LINE 1393 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_FLAG_EN: Enable (1) or Disable (0) code generat
             -ion for Event Flags"
*** ERROR C320 IN LINE 1435 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_MBOX_EN: Enable (1) or Disable (0) code generat
             -ion for MAILBOXES"
*** ERROR C320 IN LINE 1469 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_MEM_EN: Enable (1) or Disable (0) code generati
             -on for MEMORY MANAGER"
*** ERROR C320 IN LINE 1495 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_MUTEX_EN: Enable (1) or Disable (0) code genera
             -tion for MUTEX"
*** ERROR C320 IN LINE 1517 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_Q_EN: Enable (1) or Disable (0) code generation
             - for QUEUES"
*** ERROR C320 IN LINE 1567 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_SEM_EN: Enable (1) or Disable (0) code generati
             -on for SEMAPHORES"
*** ERROR C320 IN LINE 1597 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_MAX_TASKS: Max. number of tasks in your applica
             -tion"
*** WARNING C322 IN LINE 1609 OF .\Source\ucos_ii.h: unknown identifier
*** ERROR C320 IN LINE 1614 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_IDLE_STK_SIZE: Idle task stack size"
*** ERROR C320 IN LINE 1618 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_STAT_EN: Enable (1) or Disable(0) the stat
             -istics task"
*** ERROR C320 IN LINE 1622 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_STAT_STK_SIZE: Statistics task stack size"
*** ERROR C320 IN LINE 1626 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_STAT_STK_CHK_EN: Check task stacks from st
             -atistics task"
*** ERROR C320 IN LINE 1630 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_CHANGE_PRIO_EN: Include code for OSTaskCha
             -ngePrio()"
*** ERROR C320 IN LINE 1634 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_CREATE_EN: Include code for OSTaskCreate()
             -"
*** ERROR C320 IN LINE 1638 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_CREATE_EXT_EN: Include code for OSTaskCrea
             -teExt()"
*** ERROR C320 IN LINE 1642 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_DEL_EN: Include code for OSTaskDel()"
*** ERROR C320 IN LINE 1646 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_NAME_EN: Enable task names"
*** ERROR C320 IN LINE 1650 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_SUSPEND_EN: Include code for OSTaskSuspend
             -() and OSTaskResume()"
*** ERROR C320 IN LINE 1654 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_QUERY_EN: Include code for OSTaskQuery()"
C51 COMPILER V9.51   OS_Q                                                                  02/25/2015 10:39:19 PAGE 4   

*** ERROR C320 IN LINE 1658 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_REG_TBL_SIZE: Include code for task specif
             -ic registers"
*** ERROR C320 IN LINE 1672 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TICKS_PER_SEC: Sets the number of ticks in one 
             -second"
*** ERROR C320 IN LINE 1676 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TIME_DLY_HMSM_EN: Include code for OSTimeDlyHMS
             -M()"
*** ERROR C320 IN LINE 1680 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TIME_DLY_RESUME_EN: Include code for OSTimeDlyR
             -esume()"
*** ERROR C320 IN LINE 1684 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TIME_GET_SET_EN: Include code for OSTimeGet() a
             -nd OSTimeSet()"
*** ERROR C320 IN LINE 1694 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TMR_EN: When (1) enables code generation for Ti
             -mer Management"
*** ERROR C320 IN LINE 1746 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_ARG_CHK_EN: Enable (1) or Disable (0) argument 
             -checking"
*** ERROR C320 IN LINE 1751 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_CPU_HOOKS_EN: uC/OS-II hooks are found in the p
             -rocessor port files when 1"
*** ERROR C320 IN LINE 1756 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_APP_HOOKS_EN: Application-defined hooks are cal
             -led from the uC/OS-II hooks"
*** ERROR C320 IN LINE 1761 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_DEBUG_EN: Allows you to include variables for d
             -ebugging or not"
*** ERROR C320 IN LINE 1766 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_LOWEST_PRIO: Defines the lowest priority that c
             -an be assigned"
*** ERROR C320 IN LINE 1771 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_MAX_EVENTS: Max. number of event control blocks
             - in your application"
*** ERROR C320 IN LINE 1780 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_SCHED_LOCK_EN: Include code for OSSchedLock() a
             -nd OSSchedUnlock()"
*** ERROR C320 IN LINE 1785 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_EVENT_MULTI_EN: Include code for OSEventPendMul
             -ti()"
*** ERROR C320 IN LINE 1790 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_PROFILE_EN: Include data structure for run
             --time task profiling"
*** ERROR C320 IN LINE 1795 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_SW_HOOK_EN: Allows you to include the code
             - for OSTaskSwHook() or not"
*** ERROR C320 IN LINE 1800 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TICK_STEP_EN: Allows to 'step' one tick at a ti
             -me with uC/OS-View"
*** ERROR C320 IN LINE 1805 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TIME_TICK_HOOK_EN: Allows you to include the co
             -de for OSTimeTickHook() or not"
  26          #endif
  27          
  28          #if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
*** WARNING C322 IN LINE 28 OF Source\os_q.c: unknown identifier
*** WARNING C322 IN LINE 28 OF Source\os_q.c: unknown identifier
              /*
              *********************************************************************************************************
              *                                      ACCEPT MESSAGE FROM QUEUE
              *
              * Description: This function checks the queue to see if a message is available.  Unlike OSQPend(),
              *              OSQAccept() does not suspend the calling task if a message is not available.
              *
              * Arguments  : pevent        is a pointer to the event control block
              *
              *              perr          is a pointer to where an error message will be deposited.  Possible error
              *                            messages are:
              *
              *                            OS_ERR_NONE         The call was successful and your task received a
              *                                                message.
              *                            OS_ERR_EVENT_TYPE   You didn't pass a pointer to a queue
              *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
              *                            OS_ERR_Q_EMPTY      The queue did not contain any messages
              *
              * Returns    : != (void *)0  is the message in the queue if one is available.  The message is removed
              *                            from the so the next time OSQAccept() is called, the queue will contain
              *                            one less entry.
C51 COMPILER V9.51   OS_Q                                                                  02/25/2015 10:39:19 PAGE 5   

              *              == (void *)0  if you received a NULL pointer message
              *                            if the queue is empty or,
              *                            if 'pevent' is a NULL pointer or,
              *                            if you passed an invalid event type
              *
              * Note(s)    : As of V2.60, you can now pass NULL pointers through queues.  Because of this, the argument
              *              'perr' has been added to the API to tell you about the outcome of the call.
              *********************************************************************************************************
              */
              
              #if OS_Q_ACCEPT_EN > 0u
              void  *OSQAccept (OS_EVENT  *pevent,
                                INT8U     *perr)
              {
                  void      *pmsg;
                  OS_Q      *pq;
              #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
              
              
              
              #ifdef OS_SAFETY_CRITICAL
                  if (perr == (INT8U *)0) {
                      OS_SAFETY_CRITICAL_EXCEPTION();
                  }
              #endif
              
              #if OS_ARG_CHK_EN > 0u
                  if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
                      *perr = OS_ERR_PEVENT_NULL;
                      return ((void *)0);
                  }
              #endif
                  if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
                      *perr = OS_ERR_EVENT_TYPE;
                      return ((void *)0);
                  }
                  OS_ENTER_CRITICAL();
                  pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
                  if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
                      pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
                      pq->OSQEntries--;                        /* Update the number of entries in the queue          */
                      if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
                          pq->OSQOut = pq->OSQStart;
                      }
                      *perr = OS_ERR_NONE;
                  } else {
                      *perr = OS_ERR_Q_EMPTY;
                      pmsg  = (void *)0;                       /* Queue is empty                                     */
                  }
                  OS_EXIT_CRITICAL();
                  return (pmsg);                               /* Return message received (or NULL)                  */
              }
              #endif
              /*$PAGE*/
              /*
              *********************************************************************************************************
              *                                        CREATE A MESSAGE QUEUE
              *
              * Description: This function creates a message queue if free event control blocks are available.
              *
C51 COMPILER V9.51   OS_Q                                                                  02/25/2015 10:39:19 PAGE 6   

              * Arguments  : start         is a pointer to the base address of the message queue storage area.  The
              *                            storage area MUST be declared as an array of pointers to 'void' as follows
              *
              *                            void *MessageStorage[size]
              *
              *              size          is the number of elements in the storage area
              *
              * Returns    : != (OS_EVENT *)0  is a pointer to the event control clock (OS_EVENT) associated with the
              *                                created queue
              *              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
              *********************************************************************************************************
              */
              
              OS_EVENT  *OSQCreate (void    **start,
                                    INT16U    size)
              {
                  OS_EVENT  *pevent;
                  OS_Q      *pq;
              #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
              
              
              
              #ifdef OS_SAFETY_CRITICAL_IEC61508
                  if (OSSafetyCriticalStartFlag == OS_TRUE) {
                      OS_SAFETY_CRITICAL_EXCEPTION();
                  }
              #endif
              
                  if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
                      return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
                  }
                  OS_ENTER_CRITICAL();
                  pevent = OSEventFreeList;                    /* Get next free event control block                  */
                  if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
                      OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
                  }
                  OS_EXIT_CRITICAL();
                  if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
                      OS_ENTER_CRITICAL();
                      pq = OSQFreeList;                        /* Get a free queue control block                     */
                      if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
                          OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
                          OS_EXIT_CRITICAL();
                          pq->OSQStart           = start;               /*      Initialize the queue                 */
                          pq->OSQEnd             = &start[size];
                          pq->OSQIn              = start;
                          pq->OSQOut             = start;
                          pq->OSQSize            = size;
                          pq->OSQEntries         = 0u;
                          pevent->OSEventType    = OS_EVENT_TYPE_Q;
                          pevent->OSEventCnt     = 0u;
                          pevent->OSEventPtr     = pq;
              #if OS_EVENT_NAME_EN > 0u
                          pevent->OSEventName    = (INT8U *)(void *)"?";
              #endif
                          OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
                      } else {
                          pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
                          OSEventFreeList    = pevent;
                          OS_EXIT_CRITICAL();
C51 COMPILER V9.51   OS_Q                                                                  02/25/2015 10:39:19 PAGE 7   

                          pevent = (OS_EVENT *)0;
                      }
                  }
                  return (pevent);
              }
              /*$PAGE*/
              /*
              *********************************************************************************************************
              *                                        DELETE A MESSAGE QUEUE
              *
              * Description: This function deletes a message queue and readies all tasks pending on the queue.
              *
              * Arguments  : pevent        is a pointer to the event control block associated with the desired
              *                            queue.
              *
              *              opt           determines delete options as follows:
              *                            opt == OS_DEL_NO_PEND   Delete the queue ONLY if no task pending
              *                            opt == OS_DEL_ALWAYS    Deletes the queue even if tasks are waiting.
              *                                                    In this case, all the tasks pending will be readied.
              *
              *              perr          is a pointer to an error code that can contain one of the following values:
              *                            OS_ERR_NONE             The call was successful and the queue was deleted
              *                            OS_ERR_DEL_ISR          If you tried to delete the queue from an ISR
              *                            OS_ERR_INVALID_OPT      An invalid option was specified
              *                            OS_ERR_TASK_WAITING     One or more tasks were waiting on the queue
              *                            OS_ERR_EVENT_TYPE       If you didn't pass a pointer to a queue
              *                            OS_ERR_PEVENT_NULL      If 'pevent' is a NULL pointer.
              *
              * Returns    : pevent        upon error
              *              (OS_EVENT *)0 if the queue was successfully deleted.
              *
              * Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of
              *                 the queue MUST check the return code of OSQPend().
              *              2) OSQAccept() callers will not know that the intended queue has been deleted unless
              *                 they check 'pevent' to see that it's a NULL pointer.
              *              3) This call can potentially disable interrupts for a long time.  The interrupt disable
              *                 time is directly proportional to the number of tasks waiting on the queue.
              *              4) Because ALL tasks pending on the queue will be readied, you MUST be careful in
              *                 applications where the queue is used for mutual exclusion because the resource(s)
              *                 will no longer be guarded by the queue.
              *              5) If the storage for the message queue was allocated dynamically (i.e. using a malloc()
              *                 type call) then your application MUST release the memory storage by call the counterpart
              *                 call of the dynamic allocation scheme used.  If the queue storage was created statically
              *                 then, the storage can be reused.
              *********************************************************************************************************
              */
              
              #if OS_Q_DEL_EN > 0u
              OS_EVENT  *OSQDel (OS_EVENT  *pevent,
                                 INT8U      opt,
                                 INT8U     *perr)
              {
                  BOOLEAN    tasks_waiting;
                  OS_EVENT  *pevent_return;
                  OS_Q      *pq;
              #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
              
              
              
              #ifdef OS_SAFETY_CRITICAL
C51 COMPILER V9.51   OS_Q                                                                  02/25/2015 10:39:19 PAGE 8   

                  if (perr == (INT8U *)0) {
                      OS_SAFETY_CRITICAL_EXCEPTION();
                  }
              #endif
              
              #if OS_ARG_CHK_EN > 0u
                  if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
                      *perr = OS_ERR_PEVENT_NULL;
                      return (pevent);
                  }
              #endif
                  if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
                      *perr = OS_ERR_EVENT_TYPE;
                      return (pevent);
                  }
                  if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
                      *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
                      return (pevent);
                  }
                  OS_ENTER_CRITICAL();
                  if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on queue        */
                      tasks_waiting = OS_TRUE;                           /* Yes                                      */
                  } else {
                      tasks_waiting = OS_FALSE;                          /* No                                       */
                  }
                  switch (opt) {
                      case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
                           if (tasks_waiting == OS_FALSE) {
              #if OS_EVENT_NAME_EN > 0u
                               pevent->OSEventName    = (INT8U *)(void *)"?";
              #endif
                               pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
                               pq->OSQPtr             = OSQFreeList;
                               OSQFreeList            = pq;
                               pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
                               pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
                               pevent->OSEventCnt     = 0u;
                               OSEventFreeList        = pevent;          /* Get next free event control block        */
                               OS_EXIT_CRITICAL();
                               *perr                  = OS_ERR_NONE;
                               pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
                           } else {
                               OS_EXIT_CRITICAL();
                               *perr                  = OS_ERR_TASK_WAITING;
                               pevent_return          = pevent;
                           }
                           break;
              
                      case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
                           while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for queue        */
                               (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
                           }
              #if OS_EVENT_NAME_EN > 0u
                           pevent->OSEventName    = (INT8U *)(void *)"?";
              #endif
                           pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
                           pq->OSQPtr             = OSQFreeList;
                           OSQFreeList            = pq;
                           pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
                           pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
                           pevent->OSEventCnt     = 0u;
                           OSEventFreeList        = pevent;              /* Get next free event control block        */
C51 COMPILER V9.51   OS_Q                                                                  02/25/2015 10:39:19 PAGE 9   

                           OS_EXIT_CRITICAL();
                           if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
                               OS_Sched();                               /* Find highest priority task ready to run  */
                           }
                           *perr                  = OS_ERR_NONE;
                           pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
                           break;
              
                      default:
                           OS_EXIT_CRITICAL();
                           *perr                  = OS_ERR_INVALID_OPT;
                           pevent_return          = pevent;
                           break;
                  }
                  return (pevent_return);
              }
              #endif
              
              /*$PAGE*/
              /*
              *********************************************************************************************************
              *                                             FLUSH QUEUE
              *
              * Description : This function is used to flush the contents of the message queue.
              *
              * Arguments   : none
              *
              * Returns     : OS_ERR_NONE         upon success
              *               OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a queue
              *               OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
              *
              * WARNING     : You should use this function with great care because, when to flush the queue, you LOOSE
              *               the references to what the queue entries are pointing to and thus, you could cause
              *               'memory leaks'.  In other words, the data you are pointing to that's being referenced
              *               by the queue entries should, most likely, need to be de-allocated (i.e. freed).
              *********************************************************************************************************
              */
              
              #if OS_Q_FLUSH_EN > 0u
              INT8U  OSQFlush (OS_EVENT *pevent)
              {
                  OS_Q      *pq;
              #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
              
              
              
              #if OS_ARG_CHK_EN > 0u
                  if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
                      return (OS_ERR_PEVENT_NULL);
                  }
                  if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
                      return (OS_ERR_EVENT_TYPE);
                  }
              #endif
                  OS_ENTER_CRITICAL();
                  pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
                  pq->OSQIn      = pq->OSQStart;
                  pq->OSQOut     = pq->OSQStart;
                  pq->OSQEntries = 0u;
                  OS_EXIT_CRITICAL();
C51 COMPILER V9.51   OS_Q                                                                  02/25/2015 10:39:19 PAGE 10  

                  return (OS_ERR_NONE);
              }
              #endif
              
              /*$PAGE*/
              /*
              *********************************************************************************************************
              *                                     PEND ON A QUEUE FOR A MESSAGE
              *
              * Description: This function waits for a message to be sent to a queue
              *
              * Arguments  : pevent        is a pointer to the event control block associated with the desired queue
              *
              *              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will
              *                            wait for a message to arrive at the queue up to the amount of time
              *                            specified by this argument.  If you specify 0, however, your task will wait
              *                            forever at the specified queue or, until a message arrives.
              *
              *              perr          is a pointer to where an error message will be deposited.  Possible error
              *                            messages are:
              *
              *                            OS_ERR_NONE         The call was successful and your task received a
              *                                                message.
              *                            OS_ERR_TIMEOUT      A message was not received within the specified 'timeout'
             -.
              *                            OS_ERR_PEND_ABORT   The wait on the queue was aborted.
              *                            OS_ERR_EVENT_TYPE   You didn't pass a pointer to a queue
              *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
              *                            OS_ERR_PEND_ISR     If you called this function from an ISR and the result
              *                                                would lead to a suspension.
              *                            OS_ERR_PEND_LOCKED  If you called this function with the scheduler is locked
              *
              * Returns    : != (void *)0  is a pointer to the message received
              *              == (void *)0  if you received a NULL pointer message or,
              *                            if no message was received or,
              *                            if 'pevent' is a NULL pointer or,
              *                            if you didn't pass a pointer to a queue.
              *
              * Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
              *********************************************************************************************************
              */
              
              void  *OSQPend (OS_EVENT  *pevent,
                              INT32U     timeout,
                              INT8U     *perr)
              {
                  void      *pmsg;
                  OS_Q      *pq;
              #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
              
              
              
              #ifdef OS_SAFETY_CRITICAL
                  if (perr == (INT8U *)0) {
                      OS_SAFETY_CRITICAL_EXCEPTION();
                  }
              #endif
              
              #if OS_ARG_CHK_EN > 0u
                  if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
C51 COMPILER V9.51   OS_Q                                                                  02/25/2015 10:39:19 PAGE 11  

                      *perr = OS_ERR_PEVENT_NULL;
                      return ((void *)0);
                  }
              #endif
                  if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
                      *perr = OS_ERR_EVENT_TYPE;
                      return ((void *)0);
                  }
                  if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
                      *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
                      return ((void *)0);
                  }
                  if (OSLockNesting > 0u) {                    /* See if called with scheduler locked ...            */
                      *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
                      return ((void *)0);
                  }
                  OS_ENTER_CRITICAL();
                  pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
                  if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
                      pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
                      pq->OSQEntries--;                        /* Update the number of entries in the queue          */
                      if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
                          pq->OSQOut = pq->OSQStart;
                      }
                      OS_EXIT_CRITICAL();
                      *perr = OS_ERR_NONE;
                      return (pmsg);                           /* Return message received                            */
                  }
                  OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
                  OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
                  OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
                  OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
                  OS_EXIT_CRITICAL();
                  OS_Sched();                                  /* Find next highest priority task ready to run       */
                  OS_ENTER_CRITICAL();
                  switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
                      case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
                           pmsg =  OSTCBCur->OSTCBMsg;
                          *perr =  OS_ERR_NONE;
                           break;
              
                      case OS_STAT_PEND_ABORT:
                           pmsg = (void *)0;
                          *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
                           break;
              
                      case OS_STAT_PEND_TO:
                      default:
                           OS_EventTaskRemove(OSTCBCur, pevent);
                           pmsg = (void *)0;
                          *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
                           break;
                  }
                  OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
                  OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
                  OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
              #if (OS_EVENT_MULTI_EN > 0u)
                  OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
              #endif
                  OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
                  OS_EXIT_CRITICAL();
                  return (pmsg);                                    /* Return received message                       */
C51 COMPILER V9.51   OS_Q                                                                  02/25/2015 10:39:19 PAGE 12  

              }
              /*$PAGE*/
              /*
              *********************************************************************************************************
              *                                      ABORT WAITING ON A MESSAGE QUEUE
              *
              * Description: This function aborts & readies any tasks currently waiting on a queue.  This function
              *              should be used to fault-abort the wait on the queue, rather than to normally signal
              *              the queue via OSQPost(), OSQPostFront() or OSQPostOpt().
              *
              * Arguments  : pevent        is a pointer to the event control block associated with the desired queue.
              *
              *              opt           determines the type of ABORT performed:
              *                            OS_PEND_OPT_NONE         ABORT wait for a single task (HPT) waiting on the
              *                                                     queue
              *                            OS_PEND_OPT_BROADCAST    ABORT wait for ALL tasks that are  waiting on the
              *                                                     queue
              *
              *              perr          is a pointer to where an error message will be deposited.  Possible error
              *                            messages are:
              *
              *                            OS_ERR_NONE         No tasks were     waiting on the queue.
              *                            OS_ERR_PEND_ABORT   At least one task waiting on the queue was readied
              *                                                and informed of the aborted wait; check return value
              *                                                for the number of tasks whose wait on the queue
              *                                                was aborted.
              *                            OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a queue.
              *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
              *
              * Returns    : == 0          if no tasks were waiting on the queue, or upon error.
              *              >  0          if one or more tasks waiting on the queue are now readied and informed.
              *********************************************************************************************************
              */
              
              #if OS_Q_PEND_ABORT_EN > 0u
              INT8U  OSQPendAbort (OS_EVENT  *pevent,
                                   INT8U      opt,
                                   INT8U     *perr)
              {
                  INT8U      nbr_tasks;
              #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
              
              
              
              #ifdef OS_SAFETY_CRITICAL
                  if (perr == (INT8U *)0) {
                      OS_SAFETY_CRITICAL_EXCEPTION();
                  }
              #endif
              
              #if OS_ARG_CHK_EN > 0u
                  if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
                      *perr = OS_ERR_PEVENT_NULL;
                      return (0u);
                  }
              #endif
                  if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
                      *perr = OS_ERR_EVENT_TYPE;
                      return (0u);
                  }
C51 COMPILER V9.51   OS_Q                                                                  02/25/2015 10:39:19 PAGE 13  

                  OS_ENTER_CRITICAL();
                  if (pevent->OSEventGrp != 0u) {                        /* See if any task waiting on queue?        */
                      nbr_tasks = 0u;
                      switch (opt) {
                          case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                               while (pevent->OSEventGrp != 0u) {        /* Yes, ready ALL tasks waiting on queue    */
                                   (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                                   nbr_tasks++;
                               }
                               break;
              
                          case OS_PEND_OPT_NONE:
                          default:                                       /* No,  ready HPT       waiting on queue    */
                               (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                               nbr_tasks++;
                               break;
                      }
                      OS_EXIT_CRITICAL();
                      OS_Sched();                                        /* Find HPT ready to run                    */
                      *perr = OS_ERR_PEND_ABORT;
                      return (nbr_tasks);
                  }
                  OS_EXIT_CRITICAL();
                  *perr = OS_ERR_NONE;
                  return (0u);                                           /* No tasks waiting on queue                */
              }
              #endif
              
              /*$PAGE*/
              /*
              *********************************************************************************************************
              *                                        POST MESSAGE TO A QUEUE
              *
              * Description: This function sends a message to a queue
              *
              * Arguments  : pevent        is a pointer to the event control block associated with the desired queue
              *
              *              pmsg          is a pointer to the message to send.
              *
              * Returns    : OS_ERR_NONE           The call was successful and the message was sent
              *              OS_ERR_Q_FULL         If the queue cannot accept any more messages because it is full.
              *              OS_ERR_EVENT_TYPE     If you didn't pass a pointer to a queue.
              *              OS_ERR_PEVENT_NULL    If 'pevent' is a NULL pointer
              *
              * Note(s)    : As of V2.60, this function allows you to send NULL pointer messages.
              *********************************************************************************************************
              */
              
              #if OS_Q_POST_EN > 0u
              INT8U  OSQPost (OS_EVENT  *pevent,
                              void      *pmsg)
              {
                  OS_Q      *pq;
              #if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
              
              
              
              #if OS_ARG_CHK_EN > 0u
                  if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
                      return (OS_ERR_PEVENT_NULL);
C51 COMPILER V9.51   OS_Q                                                                  02/25/2015 10:39:19 PAGE 14  

                  }
              #endif
                  if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
                      return (OS_ERR_EVENT_TYPE);
                  }
                  OS_ENTER_CRITICAL();
                  if (pevent->OSEventGrp != 0u) {                    /* See if any task pending on queue             */
                                                                     /* Ready highest priority task waiting on event */
                      (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
                      OS_EXIT_CRITICAL();
                      OS_Sched();                                    /* Find highest priority task ready to run      */
                      return (OS_ERR_NONE);
                  }
                  pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
                  if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
                      OS_EXIT_CRITICAL();
                      return (OS_ERR_Q_FULL);
                  }
                  *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
                  pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
                  if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
                      pq->OSQIn = pq->OSQStart;
                  }
                  OS_EXIT_CRITICAL();
                  return (OS_ERR_NONE);
              }
              #endif
              /*$PAGE*/
              /*
              *********************************************************************************************************
              *                                   POST MESSAGE TO THE FRONT OF A QUEUE
              *
              * Description: This function sends a message to a queue but unlike OSQPost(), the message is posted at
              *              the front instead of the end of the queue.  Using OSQPostFront() allows you to send
              *              'priority' messages.
              *
              * Arguments  : pevent        is a pointer to the event control block associated with the desired queue
              *
              *              pmsg          is a pointer to the message to send.
              *
              * Returns    : OS_ERR_NONE           The call was successful and the message was sent
              *              OS_ERR_Q_FULL         If the queue cannot accept any more messages because it is full.
              *              OS_ERR_EVENT_TYPE     If you didn't pass a pointer to a queue.
              *              OS_ERR_PEVENT_NULL    If 'pevent' is a NULL pointer
              *
              * Note(s)    : As of V2.60, this function allows you to send NULL pointer messages.
              *********************************************************************************************************
              */
              
              #if OS_Q_POST_FRONT_EN > 0u
              INT8U  OSQPostFront (OS_EVENT  *pevent,
                                   void      *pmsg)
              {
                  OS_Q      *pq;
              #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
              
              
              
              #if OS_ARG_CHK_EN > 0u
                  if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
C51 COMPILER V9.51   OS_Q                                                                  02/25/2015 10:39:19 PAGE 15  

                      return (OS_ERR_PEVENT_NULL);
                  }
              #endif
                  if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
                      return (OS_ERR_EVENT_TYPE);
                  }
                  OS_ENTER_CRITICAL();
                  if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on queue              */
                                                                    /* Ready highest priority task waiting on event  */
                      (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
                      OS_EXIT_CRITICAL();
                      OS_Sched();                                   /* Find highest priority task ready to run       */
                      return (OS_ERR_NONE);
                  }
                  pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
                  if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
                      OS_EXIT_CRITICAL();
                      return (OS_ERR_Q_FULL);
                  }
                  if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
                      pq->OSQOut = pq->OSQEnd;
                  }
                  pq->OSQOut--;
                  *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
                  pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
                  OS_EXIT_CRITICAL();
                  return (OS_ERR_NONE);
              }
              #endif
              /*$PAGE*/
              /*
              *********************************************************************************************************
              *                                        POST MESSAGE TO A QUEUE
              *
              * Description: This function sends a message to a queue.  This call has been added to reduce code size
              *              since it can replace both OSQPost() and OSQPostFront().  Also, this function adds the
              *              capability to broadcast a message to ALL tasks waiting on the message queue.
              *
              * Arguments  : pevent        is a pointer to the event control block associated with the desired queue
              *
              *              pmsg          is a pointer to the message to send.
              *
              *              opt           determines the type of POST performed:
              *                            OS_POST_OPT_NONE         POST to a single waiting task
              *                                                     (Identical to OSQPost())
              *                            OS_POST_OPT_BROADCAST    POST to ALL tasks that are waiting on the queue
              *                            OS_POST_OPT_FRONT        POST as LIFO (Simulates OSQPostFront())
              *                            OS_POST_OPT_NO_SCHED     Indicates that the scheduler will NOT be invoked
              *
              * Returns    : OS_ERR_NONE           The call was successful and the message was sent
              *              OS_ERR_Q_FULL         If the queue cannot accept any more messages because it is full.
              *              OS_ERR_EVENT_TYPE     If you didn't pass a pointer to a queue.
              *              OS_ERR_PEVENT_NULL    If 'pevent' is a NULL pointer
              *
              * Warning    : Interrupts can be disabled for a long time if you do a 'broadcast'.  In fact, the
              *              interrupt disable time is proportional to the number of tasks waiting on the queue.
              *********************************************************************************************************
              */
              
              #if OS_Q_POST_OPT_EN > 0u
              INT8U  OSQPostOpt (OS_EVENT  *pevent,
                                 void      *pmsg,
C51 COMPILER V9.51   OS_Q                                                                  02/25/2015 10:39:19 PAGE 16  

                                 INT8U      opt)
              {
                  OS_Q      *pq;
              #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
              
              
              
              #if OS_ARG_CHK_EN > 0u
                  if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
                      return (OS_ERR_PEVENT_NULL);
                  }
              #endif
                  if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
                      return (OS_ERR_EVENT_TYPE);
                  }
                  OS_ENTER_CRITICAL();
                  if (pevent->OSEventGrp != 0x00u) {                /* See if any task pending on queue              */
                      if ((opt & OS_POST_OPT_BROADCAST) != 0x00u) { /* Do we need to post msg to ALL waiting tasks ? */
                          while (pevent->OSEventGrp != 0u) {        /* Yes, Post to ALL tasks waiting on queue       */
                              (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
                          }
                      } else {                                      /* No,  Post to HPT waiting on queue             */
                          (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
                      }
                      OS_EXIT_CRITICAL();
                      if ((opt & OS_POST_OPT_NO_SCHED) == 0u) {   /* See if scheduler needs to be invoked          */
                          OS_Sched();                               /* Find highest priority task ready to run       */
                      }
                      return (OS_ERR_NONE);
                  }
                  pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
                  if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
                      OS_EXIT_CRITICAL();
                      return (OS_ERR_Q_FULL);
                  }
                  if ((opt & OS_POST_OPT_FRONT) != 0x00u) {         /* Do we post to the FRONT of the queue?         */
                      if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
                          pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
                      }
                      pq->OSQOut--;
                      *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
                  } else {                                          /* No,  Post as FIFO                             */
                      *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
                      if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
                          pq->OSQIn = pq->OSQStart;
                      }
                  }
                  pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
                  OS_EXIT_CRITICAL();
                  return (OS_ERR_NONE);
              }
              #endif
              /*$PAGE*/
              /*
              *********************************************************************************************************
              *                                        QUERY A MESSAGE QUEUE
              *
              * Description: This function obtains information about a message queue.
              *
              * Arguments  : pevent        is a pointer to the event control block associated with the desired queue
C51 COMPILER V9.51   OS_Q                                                                  02/25/2015 10:39:19 PAGE 17  

              *
              *              p_q_data      is a pointer to a structure that will contain information about the message
              *                            queue.
              *
              * Returns    : OS_ERR_NONE         The call was successful and the message was sent
              *              OS_ERR_EVENT_TYPE   If you are attempting to obtain data from a non queue.
              *              OS_ERR_PEVENT_NULL  If 'pevent'   is a NULL pointer
              *              OS_ERR_PDATA_NULL   If 'p_q_data' is a NULL pointer
              *********************************************************************************************************
              */
              
              #if OS_Q_QUERY_EN > 0u
              INT8U  OSQQuery (OS_EVENT  *pevent,
                               OS_Q_DATA *p_q_data)
              {
                  OS_Q       *pq;
                  INT8U       i;
                  OS_PRIO    *psrc;
                  OS_PRIO    *pdest;
              #if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
                  OS_CPU_SR   cpu_sr = 0u;
              #endif
              
              
              
              #if OS_ARG_CHK_EN > 0u
                  if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
                      return (OS_ERR_PEVENT_NULL);
                  }
                  if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
                      return (OS_ERR_PDATA_NULL);
                  }
              #endif
                  if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
                      return (OS_ERR_EVENT_TYPE);
                  }
                  OS_ENTER_CRITICAL();
                  p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
                  psrc                 = &pevent->OSEventTbl[0];
                  pdest                = &p_q_data->OSEventTbl[0];
                  for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
                      *pdest++ = *psrc++;
                  }
                  pq = (OS_Q *)pevent->OSEventPtr;
                  if (pq->OSQEntries > 0u) {
                      p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
                  } else {
                      p_q_data->OSMsg = (void *)0;
                  }
                  p_q_data->OSNMsgs = pq->OSQEntries;
                  p_q_data->OSQSize = pq->OSQSize;
                  OS_EXIT_CRITICAL();
                  return (OS_ERR_NONE);
              }
              #endif                                                 /* OS_Q_QUERY_EN                                */
              
              /*$PAGE*/
              /*
              *********************************************************************************************************
              *                                      QUEUE MODULE INITIALIZATION
              *
              * Description : This function is called by uC/OS-II to initialize the message queue module.  Your
C51 COMPILER V9.51   OS_Q                                                                  02/25/2015 10:39:19 PAGE 18  

              *               application MUST NOT call this function.
              *
              * Arguments   :  none
              *
              * Returns     : none
              *
              * Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
              *********************************************************************************************************
              */
              
              void  OS_QInit (void)
              {
              #if OS_MAX_QS == 1u
                  OSQFreeList         = &OSQTbl[0];                /* Only ONE queue!                                */
                  OSQFreeList->OSQPtr = (OS_Q *)0;
              #endif
              
              #if OS_MAX_QS >= 2u
                  INT16U   ix;
                  INT16U   ix_next;
                  OS_Q    *pq1;
                  OS_Q    *pq2;
              
              
              
                  OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
                  for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
                      ix_next = ix + 1u;
                      pq1 = &OSQTbl[ix];
                      pq2 = &OSQTbl[ix_next];
                      pq1->OSQPtr = pq2;
                  }
                  pq1         = &OSQTbl[ix];
                  pq1->OSQPtr = (OS_Q *)0;
                  OSQFreeList = &OSQTbl[0];
              #endif
              }
              #endif                                               /* OS_Q_EN                                        */
 893                                                                                                                                                       
             -                                                                                

C51 COMPILATION COMPLETE.  116 WARNING(S),  44 ERROR(S)
