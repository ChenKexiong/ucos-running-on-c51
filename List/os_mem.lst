C51 COMPILER V9.51   OS_MEM                                                                02/25/2015 14:57:58 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE OS_MEM
OBJECT MODULE PLACED IN .\Output\os_mem.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Source\os_mem.c BROWSE INCDIR(.\Source) DEBUG OBJECTEXTEND PRINT(.\List\
                    -os_mem.lst) TABS(2) OBJECT(.\Output\os_mem.obj)

line level    source

   1          /*
   2          *********************************************************************************************************
   3          *                                                uC/OS-II
   4          *                                          The Real-Time Kernel
   5          *                                            MEMORY MANAGEMENT
   6          *
   7          *                              (c) Copyright 1992-2009, Micrium, Weston, FL
   8          *                                           All Rights Reserved
   9          *
  10          * File    : OS_MEM.C
  11          * By      : Jean J. Labrosse
  12          * Version : V2.91
  13          *
  14          * LICENSING TERMS:
  15          * ---------------
  16          *   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
  17          * If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license
  18          * its use in your product. We provide ALL the source code for your convenience and to help you experience
  19          * uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
  20          * licensing fee.
  21          *********************************************************************************************************
  22          */
  23          
  24          #ifndef  OS_MASTER_FILE
  25          #include <ucos_ii.h>
*** WARNING C318 IN LINE 44 OF .\Source\ucos_ii.h: can't open file 'app_cfg.h'
  26          #endif
  27          
  28          #if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
  29          /*
  30          *********************************************************************************************************
  31          *                                        CREATE A MEMORY PARTITION
  32          *
  33          * Description : Create a fixed-sized memory partition that will be managed by uC/OS-II.
  34          *
  35          * Arguments   : addr     is the starting address of the memory partition
  36          *
  37          *               nblks    is the number of memory blocks to create from the partition.
  38          *
  39          *               blksize  is the size (in bytes) of each block in the memory partition.
  40          *
  41          *               perr     is a pointer to a variable containing an error message which will be set by
  42          *                        this function to either:
  43          *
  44          *                        OS_ERR_NONE              if the memory partition has been created correctly.
  45          *                        OS_ERR_MEM_INVALID_ADDR  if you are specifying an invalid address for the memory
  46          *                                                 storage of the partition or, the block does not align
  47          *                                                 on a pointer boundary
  48          *                        OS_ERR_MEM_INVALID_PART  no free partitions available
  49          *                        OS_ERR_MEM_INVALID_BLKS  user specified an invalid number of blocks (must be >= 2
             -)
  50          *                        OS_ERR_MEM_INVALID_SIZE  user specified an invalid block size
  51          *                                                   - must be greater than the size of a pointer
  52          *                                                   - must be able to hold an integral number of pointers
C51 COMPILER V9.51   OS_MEM                                                                02/25/2015 14:57:58 PAGE 2   

  53          * Returns    : != (OS_MEM *)0  is the partition was created
  54          *              == (OS_MEM *)0  if the partition was not created because of invalid arguments or, no
  55          *                              free partition is available.
  56          *********************************************************************************************************
  57          */
  58          
  59          OS_MEM  *OSMemCreate (void   *addr,
  60                                INT32U  nblks,
  61                                INT32U  blksize,
  62                                INT8U  *perr)
  63          {
  64   1          OS_MEM    *pmem;
  65   1          INT8U     *pblk;
  66   1          void     **plink;
  67   1          INT32U     loops;
  68   1          INT32U     i;
  69   1      #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
*** WARNING C322 IN LINE 69 OF Source\os_mem.c: unknown identifier
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
  72   1      
  73   1      
  74   1      
  75   1      #ifdef OS_SAFETY_CRITICAL
                  if (perr == (INT8U *)0) {
                      OS_SAFETY_CRITICAL_EXCEPTION();
                  }
              #endif
  80   1      
  81   1      #ifdef OS_SAFETY_CRITICAL_IEC61508
                  if (OSSafetyCriticalStartFlag == OS_TRUE) {
                      OS_SAFETY_CRITICAL_EXCEPTION();
                  }
              #endif
  86   1      
  87   1      #if OS_ARG_CHK_EN > 0u
                  if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
                      *perr = OS_ERR_MEM_INVALID_ADDR;
                      return ((OS_MEM *)0);
                  }
                  if (((INT32U)addr & (sizeof(void *) - 1u)) != 0u){  /* Must be pointer size aligned                */
                      *perr = OS_ERR_MEM_INVALID_ADDR;
                      return ((OS_MEM *)0);
                  }
                  if (nblks < 2u) {                                 /* Must have at least 2 blocks per partition     */
                      *perr = OS_ERR_MEM_INVALID_BLKS;
                      return ((OS_MEM *)0);
                  }
                  if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
                      *perr = OS_ERR_MEM_INVALID_SIZE;
                      return ((OS_MEM *)0);
                  }
              #endif
 105   1          OS_ENTER_CRITICAL();
 106   1          pmem = OSMemFreeList;                             /* Get next free memory partition                */
 107   1          if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 108   2              OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 109   2          }
 110   1          OS_EXIT_CRITICAL();
 111   1          if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 112   2              *perr = OS_ERR_MEM_INVALID_PART;
 113   2              return ((OS_MEM *)0);
C51 COMPILER V9.51   OS_MEM                                                                02/25/2015 14:57:58 PAGE 3   

 114   2          }
 115   1          plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 116   1          pblk  = (INT8U *)addr;
 117   1          loops  = nblks - 1u;
 118   1          for (i = 0u; i < loops; i++) {
 119   2              pblk +=  blksize;                             /* Point to the FOLLOWING block                  */
 120   2             *plink = (void  *)pblk;                        /* Save pointer to NEXT block in CURRENT block   */
 121   2              plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 122   2          }
 123   1          *plink              = (void *)0;                  /* Last memory block points to NULL              */
 124   1          pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 125   1          pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 126   1          pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 127   1          pmem->OSMemNBlks    = nblks;
 128   1          pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 129   1          *perr               = OS_ERR_NONE;
 130   1          return (pmem);
 131   1      }
 132          /*$PAGE*/
 133          /*
 134          *********************************************************************************************************
 135          *                                          GET A MEMORY BLOCK
 136          *
 137          * Description : Get a memory block from a partition
 138          *
 139          * Arguments   : pmem    is a pointer to the memory partition control block
 140          *
 141          *               perr    is a pointer to a variable containing an error message which will be set by this
 142          *                       function to either:
 143          *
 144          *                       OS_ERR_NONE             if the memory partition has been created correctly.
 145          *                       OS_ERR_MEM_NO_FREE_BLKS if there are no more free memory blocks to allocate to cal
             -ler
 146          *                       OS_ERR_MEM_INVALID_PMEM if you passed a NULL pointer for 'pmem'
 147          *
 148          * Returns     : A pointer to a memory block if no error is detected
 149          *               A pointer to NULL if an error is detected
 150          *********************************************************************************************************
 151          */
 152          
 153          void  *OSMemGet (OS_MEM  *pmem,
 154                           INT8U   *perr)
 155          {
 156   1          void      *pblk;
 157   1      #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
*** WARNING C322 IN LINE 157 OF Source\os_mem.c: unknown identifier
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
 160   1      
 161   1      
 162   1      
 163   1      #ifdef OS_SAFETY_CRITICAL
                  if (perr == (INT8U *)0) {
                      OS_SAFETY_CRITICAL_EXCEPTION();
                  }
              #endif
 168   1      
 169   1      #if OS_ARG_CHK_EN > 0u
                  if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
                      *perr = OS_ERR_MEM_INVALID_PMEM;
                      return ((void *)0);
                  }
C51 COMPILER V9.51   OS_MEM                                                                02/25/2015 14:57:58 PAGE 4   

              #endif
 175   1          OS_ENTER_CRITICAL();
 176   1          if (pmem->OSMemNFree > 0u) {                      /* See if there are any free memory blocks       */
 177   2              pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 178   2              pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 179   2              pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 180   2              OS_EXIT_CRITICAL();
 181   2              *perr = OS_ERR_NONE;                          /*      No error                                 */
 182   2              return (pblk);                                /*      Return memory block to caller            */
 183   2          }
 184   1          OS_EXIT_CRITICAL();
 185   1          *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 186   1          return ((void *)0);                               /*      Return NULL pointer to caller            */
 187   1      }
 188          /*$PAGE*/
 189          /*
 190          *********************************************************************************************************
 191          *                                   GET THE NAME OF A MEMORY PARTITION
 192          *
 193          * Description: This function is used to obtain the name assigned to a memory partition.
 194          *
 195          * Arguments  : pmem      is a pointer to the memory partition
 196          *
 197          *              pname     is a pointer to a pointer to an ASCII string that will receive the name of the me
             -mory partition.
 198          *
 199          *              perr      is a pointer to an error code that can contain one of the following values:
 200          *
 201          *                        OS_ERR_NONE                if the name was copied to 'pname'
 202          *                        OS_ERR_MEM_INVALID_PMEM    if you passed a NULL pointer for 'pmem'
 203          *                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
 204          *                        OS_ERR_NAME_GET_ISR        You called this function from an ISR
 205          *
 206          * Returns    : The length of the string or 0 if 'pmem' is a NULL pointer.
 207          *********************************************************************************************************
 208          */
 209          
 210          #if OS_MEM_NAME_EN > 0u
 211          INT8U  OSMemNameGet (OS_MEM   *pmem,
 212                               INT8U   **pname,
 213                               INT8U    *perr)
 214          {
 215   1          INT8U      len;
 216   1      #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
*** WARNING C322 IN LINE 216 OF Source\os_mem.c: unknown identifier
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
 219   1      
 220   1      
 221   1      
 222   1      #ifdef OS_SAFETY_CRITICAL
                  if (perr == (INT8U *)0) {
                      OS_SAFETY_CRITICAL_EXCEPTION();
                  }
              #endif
 227   1      
 228   1      #if OS_ARG_CHK_EN > 0u
                  if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
                      *perr = OS_ERR_MEM_INVALID_PMEM;
                      return (0u);
                  }
                  if (pname == (INT8U **)0) {                  /* Is 'pname' a NULL pointer?                         */
C51 COMPILER V9.51   OS_MEM                                                                02/25/2015 14:57:58 PAGE 5   

                      *perr = OS_ERR_PNAME_NULL;
                      return (0u);
                  }
              #endif
 238   1          if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 239   2              *perr = OS_ERR_NAME_GET_ISR;
 240   2              return (0u);
 241   2          }
 242   1          OS_ENTER_CRITICAL();
 243   1          *pname = pmem->OSMemName;
 244   1          len    = OS_StrLen(*pname);
 245   1          OS_EXIT_CRITICAL();
 246   1          *perr  = OS_ERR_NONE;
 247   1          return (len);
 248   1      }
 249          #endif
 250          
 251          /*$PAGE*/
 252          /*
 253          *********************************************************************************************************
 254          *                                 ASSIGN A NAME TO A MEMORY PARTITION
 255          *
 256          * Description: This function assigns a name to a memory partition.
 257          *
 258          * Arguments  : pmem      is a pointer to the memory partition
 259          *
 260          *              pname     is a pointer to an ASCII string that contains the name of the memory partition.
 261          *
 262          *              perr      is a pointer to an error code that can contain one of the following values:
 263          *
 264          *                        OS_ERR_NONE                if the name was copied to 'pname'
 265          *                        OS_ERR_MEM_INVALID_PMEM    if you passed a NULL pointer for 'pmem'
 266          *                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
 267          *                        OS_ERR_MEM_NAME_TOO_LONG   if the name doesn't fit in the storage area
 268          *                        OS_ERR_NAME_SET_ISR        if you called this function from an ISR
 269          *
 270          * Returns    : None
 271          *********************************************************************************************************
 272          */
 273          
 274          #if OS_MEM_NAME_EN > 0u
 275          void  OSMemNameSet (OS_MEM  *pmem,
 276                              INT8U   *pname,
 277                              INT8U   *perr)
 278          {
 279   1      #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
*** WARNING C322 IN LINE 279 OF Source\os_mem.c: unknown identifier
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
 282   1      
 283   1      
 284   1      
 285   1      #ifdef OS_SAFETY_CRITICAL
                  if (perr == (INT8U *)0) {
                      OS_SAFETY_CRITICAL_EXCEPTION();
                  }
              #endif
 290   1      
 291   1      #if OS_ARG_CHK_EN > 0u
                  if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
                      *perr = OS_ERR_MEM_INVALID_PMEM;
                      return;
C51 COMPILER V9.51   OS_MEM                                                                02/25/2015 14:57:58 PAGE 6   

                  }
                  if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
                      *perr = OS_ERR_PNAME_NULL;
                      return;
                  }
              #endif
 301   1          if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 302   2              *perr = OS_ERR_NAME_SET_ISR;
 303   2              return;
 304   2          }
 305   1          OS_ENTER_CRITICAL();
 306   1          pmem->OSMemName = pname;
 307   1          OS_EXIT_CRITICAL();
 308   1          *perr           = OS_ERR_NONE;
 309   1      }
 310          #endif
 311          
 312          /*$PAGE*/
 313          /*
 314          *********************************************************************************************************
 315          *                                         RELEASE A MEMORY BLOCK
 316          *
 317          * Description : Returns a memory block to a partition
 318          *
 319          * Arguments   : pmem    is a pointer to the memory partition control block
 320          *
 321          *               pblk    is a pointer to the memory block being released.
 322          *
 323          * Returns     : OS_ERR_NONE              if the memory block was inserted into the partition
 324          *               OS_ERR_MEM_FULL          if you are returning a memory block to an already FULL memory
 325          *                                        partition (You freed more blocks than you allocated!)
 326          *               OS_ERR_MEM_INVALID_PMEM  if you passed a NULL pointer for 'pmem'
 327          *               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
 328          *********************************************************************************************************
 329          */
 330          
 331          INT8U  OSMemPut (OS_MEM  *pmem,
 332                           void    *pblk)
 333          {
 334   1      #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
*** WARNING C322 IN LINE 334 OF Source\os_mem.c: unknown identifier
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
 337   1      
 338   1      
 339   1      
 340   1      #if OS_ARG_CHK_EN > 0u
                  if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
                      return (OS_ERR_MEM_INVALID_PMEM);
                  }
                  if (pblk == (void *)0) {                     /* Must release a valid block                         */
                      return (OS_ERR_MEM_INVALID_PBLK);
                  }
              #endif
 348   1          OS_ENTER_CRITICAL();
 349   1          if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 350   2              OS_EXIT_CRITICAL();
 351   2              return (OS_ERR_MEM_FULL);
 352   2          }
 353   1          *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 354   1          pmem->OSMemFreeList = pblk;
 355   1          pmem->OSMemNFree++;                          /* One more memory block in this partition            */
C51 COMPILER V9.51   OS_MEM                                                                02/25/2015 14:57:58 PAGE 7   

 356   1          OS_EXIT_CRITICAL();
 357   1          return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 358   1      }
 359          /*$PAGE*/
 360          /*
 361          *********************************************************************************************************
 362          *                                          QUERY MEMORY PARTITION
 363          *
 364          * Description : This function is used to determine the number of free memory blocks and the number of
 365          *               used memory blocks from a memory partition.
 366          *
 367          * Arguments   : pmem        is a pointer to the memory partition control block
 368          *
 369          *               p_mem_data  is a pointer to a structure that will contain information about the memory
 370          *                           partition.
 371          *
 372          * Returns     : OS_ERR_NONE               if no errors were found.
 373          *               OS_ERR_MEM_INVALID_PMEM   if you passed a NULL pointer for 'pmem'
 374          *               OS_ERR_MEM_INVALID_PDATA  if you passed a NULL pointer to the data recipient.
 375          *********************************************************************************************************
 376          */
 377          
 378          #if OS_MEM_QUERY_EN > 0u
 379          INT8U  OSMemQuery (OS_MEM       *pmem,
 380                             OS_MEM_DATA  *p_mem_data)
 381          {
 382   1      #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
*** WARNING C322 IN LINE 382 OF Source\os_mem.c: unknown identifier
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
 385   1      
 386   1      
 387   1      
 388   1      #if OS_ARG_CHK_EN > 0u
                  if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
                      return (OS_ERR_MEM_INVALID_PMEM);
                  }
                  if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
                      return (OS_ERR_MEM_INVALID_PDATA);
                  }
              #endif
 396   1          OS_ENTER_CRITICAL();
 397   1          p_mem_data->OSAddr     = pmem->OSMemAddr;
 398   1          p_mem_data->OSFreeList = pmem->OSMemFreeList;
 399   1          p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 400   1          p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 401   1          p_mem_data->OSNFree    = pmem->OSMemNFree;
 402   1          OS_EXIT_CRITICAL();
 403   1          p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 404   1          return (OS_ERR_NONE);
 405   1      }
 406          #endif                                           /* OS_MEM_QUERY_EN                                    */
 407          /*$PAGE*/
 408          /*
 409          *********************************************************************************************************
 410          *                                    INITIALIZE MEMORY PARTITION MANAGER
 411          *
 412          * Description : This function is called by uC/OS-II to initialize the memory partition manager.  Your
 413          *               application MUST NOT call this function.
 414          *
 415          * Arguments   : none
 416          *
C51 COMPILER V9.51   OS_MEM                                                                02/25/2015 14:57:58 PAGE 8   

 417          * Returns     : none
 418          *
 419          * Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
 420          *********************************************************************************************************
 421          */
 422          
 423          void  OS_MemInit (void)
 424          {
 425   1      #if OS_MAX_MEM_PART == 1u
                  OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
                  OSMemFreeList               = (OS_MEM *)&OSMemTbl[0]; /* Point to beginning of free list           */
              #if OS_MEM_NAME_EN > 0u
                  OSMemFreeList->OSMemName    = (INT8U *)"?";           /* Unknown name                              */
              #endif
              #endif
 432   1      
 433   1      #if OS_MAX_MEM_PART >= 2u
 434   1          OS_MEM  *pmem;
 435   1          INT16U   i;
 436   1      
 437   1      
 438   1          OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 439   1          for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 440   2              pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
 441   2              pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
 442   2      #if OS_MEM_NAME_EN > 0u
 443   2              pmem->OSMemName  = (INT8U *)(void *)"?";
 444   2      #endif
 445   2          }
 446   1          pmem                = &OSMemTbl[i];
 447   1          pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 448   1      #if OS_MEM_NAME_EN > 0u
 449   1          pmem->OSMemName = (INT8U *)(void *)"?";
 450   1      #endif
 451   1      
 452   1          OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
 453   1      #endif
 454   1      }
 455          #endif                                                    /* OS_MEM_EN                                 */
 456                                                                                                                                                       
             -                                                                                


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1087    ----
   CONSTANT SIZE    =      2    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      74
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  7 WARNING(S),  0 ERROR(S)
