C51 COMPILER V9.51   OS_MBOX                                                               02/25/2015 10:39:17 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE OS_MBOX
OBJECT MODULE PLACED IN .\Output\os_mbox.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE Source\os_mbox.c BROWSE INCDIR(.\Source) DEBUG OBJECTEXTEND PRINT(.\List\os
                    -_mbox.lst) TABS(2) OBJECT(.\Output\os_mbox.obj)

line level    source

   1          /*
   2          *********************************************************************************************************
   3          *                                                uC/OS-II
   4          *                                          The Real-Time Kernel
   5          *                                       MESSAGE MAILBOX MANAGEMENT
   6          *
   7          *                              (c) Copyright 1992-2009, Micrium, Weston, FL
   8          *                                           All Rights Reserved
   9          *
  10          * File    : OS_MBOX.C
  11          * By      : Jean J. Labrosse
  12          * Version : V2.91
  13          *
  14          * LICENSING TERMS:
  15          * ---------------
  16          *   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
  17          * If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license
  18          * its use in your product. We provide ALL the source code for your convenience and to help you experience
  19          * uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
  20          * licensing fee.
  21          *********************************************************************************************************
  22          */
  23          
  24          #ifndef  OS_MASTER_FILE
  25          #include <ucos_ii.h>
*** WARNING C318 IN LINE 44 OF .\Source\ucos_ii.h: can't open file 'app_cfg.h'
*** WARNING C318 IN LINE 45 OF .\Source\ucos_ii.h: can't open file 'os_cfg.h'
*** WARNING C322 IN LINE 72 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 81 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 170 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 345 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 351 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 351 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 351 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 351 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 351 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 351 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 372 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 372 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 419 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 433 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 433 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 463 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 479 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 506 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 520 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 537 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 548 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 548 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 548 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 548 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 548 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 552 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 552 OF .\Source\ucos_ii.h: unknown identifier
C51 COMPILER V9.51   OS_MBOX                                                               02/25/2015 10:39:17 PAGE 2   

*** WARNING C322 IN LINE 552 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 552 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 552 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 552 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 556 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 556 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 556 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 560 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 560 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 577 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 581 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 589 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 593 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 605 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 646 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 646 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 646 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 646 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 646 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 646 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 651 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 651 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 656 OF .\Source\ucos_ii.h: unknown identifier
*** ERROR C202 IN LINE 672 OF .\Source\ucos_ii.h: 'OS_LOWEST_PRIO': undefined identifier
*** ERROR C136 IN LINE 672 OF .\Source\ucos_ii.h: invalid dimension size: [0]
*** ERROR C202 IN LINE 684 OF .\Source\ucos_ii.h: 'OS_TASK_IDLE_STK_SIZE': undefined identifier
*** ERROR C136 IN LINE 684 OF .\Source\ucos_ii.h: invalid dimension size: [0]
*** ERROR C202 IN LINE 691 OF .\Source\ucos_ii.h: 'OS_LOWEST_PRIO': undefined identifier
*** ERROR C136 IN LINE 691 OF .\Source\ucos_ii.h: invalid dimension size: [0]
*** ERROR C202 IN LINE 692 OF .\Source\ucos_ii.h: 'OS_MAX_TASKS': undefined identifier
*** ERROR C136 IN LINE 692 OF .\Source\ucos_ii.h: invalid dimension size: [0]
*** WARNING C322 IN LINE 694 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 698 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 698 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 703 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 703 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 708 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 712 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 743 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 743 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 743 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 743 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 743 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 771 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 771 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 823 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 870 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 870 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 904 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 940 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 940 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 999 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1044 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1049 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1056 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1068 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1073 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1083 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1088 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1088 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1093 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1100 OF .\Source\ucos_ii.h: unknown identifier
C51 COMPILER V9.51   OS_MBOX                                                               02/25/2015 10:39:17 PAGE 3   

*** WARNING C322 IN LINE 1120 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1127 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1131 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1144 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1193 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1212 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1216 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1216 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1216 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1216 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1216 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1237 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1237 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1249 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1249 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1253 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1259 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1259 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1259 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1259 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1267 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1271 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1271 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1277 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1277 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1289 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1301 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1321 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1327 OF .\Source\ucos_ii.h: unknown identifier
*** WARNING C322 IN LINE 1339 OF .\Source\ucos_ii.h: unknown identifier
*** ERROR C320 IN LINE 1393 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_FLAG_EN: Enable (1) or Disable (0) code generat
             -ion for Event Flags"
*** ERROR C320 IN LINE 1435 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_MBOX_EN: Enable (1) or Disable (0) code generat
             -ion for MAILBOXES"
*** ERROR C320 IN LINE 1469 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_MEM_EN: Enable (1) or Disable (0) code generati
             -on for MEMORY MANAGER"
*** ERROR C320 IN LINE 1495 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_MUTEX_EN: Enable (1) or Disable (0) code genera
             -tion for MUTEX"
*** ERROR C320 IN LINE 1517 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_Q_EN: Enable (1) or Disable (0) code generation
             - for QUEUES"
*** ERROR C320 IN LINE 1567 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_SEM_EN: Enable (1) or Disable (0) code generati
             -on for SEMAPHORES"
*** ERROR C320 IN LINE 1597 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_MAX_TASKS: Max. number of tasks in your applica
             -tion"
*** WARNING C322 IN LINE 1609 OF .\Source\ucos_ii.h: unknown identifier
*** ERROR C320 IN LINE 1614 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_IDLE_STK_SIZE: Idle task stack size"
*** ERROR C320 IN LINE 1618 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_STAT_EN: Enable (1) or Disable(0) the stat
             -istics task"
*** ERROR C320 IN LINE 1622 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_STAT_STK_SIZE: Statistics task stack size"
*** ERROR C320 IN LINE 1626 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_STAT_STK_CHK_EN: Check task stacks from st
             -atistics task"
*** ERROR C320 IN LINE 1630 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_CHANGE_PRIO_EN: Include code for OSTaskCha
             -ngePrio()"
*** ERROR C320 IN LINE 1634 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_CREATE_EN: Include code for OSTaskCreate()
             -"
*** ERROR C320 IN LINE 1638 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_CREATE_EXT_EN: Include code for OSTaskCrea
             -teExt()"
*** ERROR C320 IN LINE 1642 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_DEL_EN: Include code for OSTaskDel()"
*** ERROR C320 IN LINE 1646 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_NAME_EN: Enable task names"
*** ERROR C320 IN LINE 1650 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_SUSPEND_EN: Include code for OSTaskSuspend
             -() and OSTaskResume()"
*** ERROR C320 IN LINE 1654 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_QUERY_EN: Include code for OSTaskQuery()"
C51 COMPILER V9.51   OS_MBOX                                                               02/25/2015 10:39:17 PAGE 4   

*** ERROR C320 IN LINE 1658 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_REG_TBL_SIZE: Include code for task specif
             -ic registers"
*** ERROR C320 IN LINE 1672 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TICKS_PER_SEC: Sets the number of ticks in one 
             -second"
*** ERROR C320 IN LINE 1676 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TIME_DLY_HMSM_EN: Include code for OSTimeDlyHMS
             -M()"
*** ERROR C320 IN LINE 1680 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TIME_DLY_RESUME_EN: Include code for OSTimeDlyR
             -esume()"
*** ERROR C320 IN LINE 1684 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TIME_GET_SET_EN: Include code for OSTimeGet() a
             -nd OSTimeSet()"
*** ERROR C320 IN LINE 1694 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TMR_EN: When (1) enables code generation for Ti
             -mer Management"
*** ERROR C320 IN LINE 1746 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_ARG_CHK_EN: Enable (1) or Disable (0) argument 
             -checking"
*** ERROR C320 IN LINE 1751 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_CPU_HOOKS_EN: uC/OS-II hooks are found in the p
             -rocessor port files when 1"
*** ERROR C320 IN LINE 1756 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_APP_HOOKS_EN: Application-defined hooks are cal
             -led from the uC/OS-II hooks"
*** ERROR C320 IN LINE 1761 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_DEBUG_EN: Allows you to include variables for d
             -ebugging or not"
*** ERROR C320 IN LINE 1766 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_LOWEST_PRIO: Defines the lowest priority that c
             -an be assigned"
*** ERROR C320 IN LINE 1771 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_MAX_EVENTS: Max. number of event control blocks
             - in your application"
*** ERROR C320 IN LINE 1780 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_SCHED_LOCK_EN: Include code for OSSchedLock() a
             -nd OSSchedUnlock()"
*** ERROR C320 IN LINE 1785 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_EVENT_MULTI_EN: Include code for OSEventPendMul
             -ti()"
*** ERROR C320 IN LINE 1790 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_PROFILE_EN: Include data structure for run
             --time task profiling"
*** ERROR C320 IN LINE 1795 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TASK_SW_HOOK_EN: Allows you to include the code
             - for OSTaskSwHook() or not"
*** ERROR C320 IN LINE 1800 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TICK_STEP_EN: Allows to 'step' one tick at a ti
             -me with uC/OS-View"
*** ERROR C320 IN LINE 1805 OF .\Source\ucos_ii.h: "OS_CFG.H, Missing OS_TIME_TICK_HOOK_EN: Allows you to include the co
             -de for OSTimeTickHook() or not"
  26          #endif
  27          
  28          #if OS_MBOX_EN > 0u
*** WARNING C322 IN LINE 28 OF Source\os_mbox.c: unknown identifier
              /*
              *********************************************************************************************************
              *                                     ACCEPT MESSAGE FROM MAILBOX
              *
              * Description: This function checks the mailbox to see if a message is available.  Unlike OSMboxPend(),
              *              OSMboxAccept() does not suspend the calling task if a message is not available.
              *
              * Arguments  : pevent        is a pointer to the event control block
              *
              * Returns    : != (void *)0  is the message in the mailbox if one is available.  The mailbox is cleared
              *                            so the next time OSMboxAccept() is called, the mailbox will be empty.
              *              == (void *)0  if the mailbox is empty or,
              *                            if 'pevent' is a NULL pointer or,
              *                            if you didn't pass the proper event pointer.
              *********************************************************************************************************
              */
              
              #if OS_MBOX_ACCEPT_EN > 0u
              void  *OSMboxAccept (OS_EVENT *pevent)
              {
                  void      *pmsg;
              #if OS_CRITICAL_METHOD == 3u                              /* Allocate storage for CPU status register  */
C51 COMPILER V9.51   OS_MBOX                                                               02/25/2015 10:39:17 PAGE 5   

                  OS_CPU_SR  cpu_sr = 0u;
              #endif
              
              
              
              #if OS_ARG_CHK_EN > 0u
                  if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
                      return ((void *)0);
                  }
              #endif
                  if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
                      return ((void *)0);
                  }
                  OS_ENTER_CRITICAL();
                  pmsg               = pevent->OSEventPtr;
                  pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
                  OS_EXIT_CRITICAL();
                  return (pmsg);                                        /* Return the message received (or NULL)     */
              }
              #endif
              /*$PAGE*/
              /*
              *********************************************************************************************************
              *                                        CREATE A MESSAGE MAILBOX
              *
              * Description: This function creates a message mailbox if free event control blocks are available.
              *
              * Arguments  : pmsg          is a pointer to a message that you wish to deposit in the mailbox.  If
              *                            you set this value to the NULL pointer (i.e. (void *)0) then the mailbox
              *                            will be considered empty.
              *
              * Returns    : != (OS_EVENT *)0  is a pointer to the event control clock (OS_EVENT) associated with the
              *                                created mailbox
              *              == (OS_EVENT *)0  if no event control blocks were available
              *********************************************************************************************************
              */
              
              OS_EVENT  *OSMboxCreate (void *pmsg)
              {
                  OS_EVENT  *pevent;
              #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
              
              
              
              #ifdef OS_SAFETY_CRITICAL_IEC61508
                  if (OSSafetyCriticalStartFlag == OS_TRUE) {
                      OS_SAFETY_CRITICAL_EXCEPTION();
                  }
              #endif
              
                  if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
                      return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
                  }
                  OS_ENTER_CRITICAL();
                  pevent = OSEventFreeList;                    /* Get next free event control block                  */
                  if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
                      OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
                  }
                  OS_EXIT_CRITICAL();
                  if (pevent != (OS_EVENT *)0) {
C51 COMPILER V9.51   OS_MBOX                                                               02/25/2015 10:39:17 PAGE 6   

                      pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
                      pevent->OSEventCnt     = 0u;
                      pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
              #if OS_EVENT_NAME_EN > 0u
                      pevent->OSEventName    = (INT8U *)(void *)"?";
              #endif
                      OS_EventWaitListInit(pevent);
                  }
                  return (pevent);                             /* Return pointer to event control block              */
              }
              /*$PAGE*/
              /*
              *********************************************************************************************************
              *                                         DELETE A MAIBOX
              *
              * Description: This function deletes a mailbox and readies all tasks pending on the mailbox.
              *
              * Arguments  : pevent        is a pointer to the event control block associated with the desired
              *                            mailbox.
              *
              *              opt           determines delete options as follows:
              *                            opt == OS_DEL_NO_PEND   Delete the mailbox ONLY if no task pending
              *                            opt == OS_DEL_ALWAYS    Deletes the mailbox even if tasks are waiting.
              *                                                    In this case, all the tasks pending will be readied.
              *
              *              perr          is a pointer to an error code that can contain one of the following values:
              *                            OS_ERR_NONE             The call was successful and the mailbox was deleted
              *                            OS_ERR_DEL_ISR          If you attempted to delete the mailbox from an ISR
              *                            OS_ERR_INVALID_OPT      An invalid option was specified
              *                            OS_ERR_TASK_WAITING     One or more tasks were waiting on the mailbox
              *                            OS_ERR_EVENT_TYPE       If you didn't pass a pointer to a mailbox
              *                            OS_ERR_PEVENT_NULL      If 'pevent' is a NULL pointer.
              *
              * Returns    : pevent        upon error
              *              (OS_EVENT *)0 if the mailbox was successfully deleted.
              *
              * Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of
              *                 the mailbox MUST check the return code of OSMboxPend().
              *              2) OSMboxAccept() callers will not know that the intended mailbox has been deleted!
              *              3) This call can potentially disable interrupts for a long time.  The interrupt disable
              *                 time is directly proportional to the number of tasks waiting on the mailbox.
              *              4) Because ALL tasks pending on the mailbox will be readied, you MUST be careful in
              *                 applications where the mailbox is used for mutual exclusion because the resource(s)
              *                 will no longer be guarded by the mailbox.
              *********************************************************************************************************
              */
              
              #if OS_MBOX_DEL_EN > 0u
              OS_EVENT  *OSMboxDel (OS_EVENT  *pevent,
                                    INT8U      opt,
                                    INT8U     *perr)
              {
                  BOOLEAN    tasks_waiting;
                  OS_EVENT  *pevent_return;
              #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
              
              
              
              #ifdef OS_SAFETY_CRITICAL
                  if (perr == (INT8U *)0) {
C51 COMPILER V9.51   OS_MBOX                                                               02/25/2015 10:39:17 PAGE 7   

                      OS_SAFETY_CRITICAL_EXCEPTION();
                  }
              #endif
              
              #if OS_ARG_CHK_EN > 0u
                  if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
                      *perr = OS_ERR_PEVENT_NULL;
                      return (pevent);
                  }
              #endif
                  if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
                      *perr = OS_ERR_EVENT_TYPE;
                      return (pevent);
                  }
                  if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
                      *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
                      return (pevent);
                  }
                  OS_ENTER_CRITICAL();
                  if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on mailbox      */
                      tasks_waiting = OS_TRUE;                           /* Yes                                      */
                  } else {
                      tasks_waiting = OS_FALSE;                          /* No                                       */
                  }
                  switch (opt) {
                      case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
                           if (tasks_waiting == OS_FALSE) {
              #if OS_EVENT_NAME_EN > 0u
                               pevent->OSEventName = (INT8U *)(void *)"?";
              #endif
                               pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
                               pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
                               pevent->OSEventCnt  = 0u;
                               OSEventFreeList     = pevent;             /* Get next free event control block        */
                               OS_EXIT_CRITICAL();
                               *perr               = OS_ERR_NONE;
                               pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
                           } else {
                               OS_EXIT_CRITICAL();
                               *perr               = OS_ERR_TASK_WAITING;
                               pevent_return       = pevent;
                           }
                           break;
              
                      case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
                           while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for mailbox      */
                               (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
                           }
              #if OS_EVENT_NAME_EN > 0u
                           pevent->OSEventName    = (INT8U *)(void *)"?";
              #endif
                           pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
                           pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
                           pevent->OSEventCnt     = 0u;
                           OSEventFreeList        = pevent;              /* Get next free event control block        */
                           OS_EXIT_CRITICAL();
                           if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
                               OS_Sched();                               /* Find highest priority task ready to run  */
                           }
                           *perr         = OS_ERR_NONE;
                           pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
                           break;
C51 COMPILER V9.51   OS_MBOX                                                               02/25/2015 10:39:17 PAGE 8   

              
                      default:
                           OS_EXIT_CRITICAL();
                           *perr         = OS_ERR_INVALID_OPT;
                           pevent_return = pevent;
                           break;
                  }
                  return (pevent_return);
              }
              #endif
              
              /*$PAGE*/
              /*
              *********************************************************************************************************
              *                                      PEND ON MAILBOX FOR A MESSAGE
              *
              * Description: This function waits for a message to be sent to a mailbox
              *
              * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
              *
              *              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will
              *                            wait for a message to arrive at the mailbox up to the amount of time
              *                            specified by this argument.  If you specify 0, however, your task will wait
              *                            forever at the specified mailbox or, until a message arrives.
              *
              *              perr          is a pointer to where an error message will be deposited.  Possible error
              *                            messages are:
              *
              *                            OS_ERR_NONE         The call was successful and your task received a
              *                                                message.
              *                            OS_ERR_TIMEOUT      A message was not received within the specified 'timeout'
             -.
              *                            OS_ERR_PEND_ABORT   The wait on the mailbox was aborted.
              *                            OS_ERR_EVENT_TYPE   Invalid event type
              *                            OS_ERR_PEND_ISR     If you called this function from an ISR and the result
              *                                                would lead to a suspension.
              *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
              *                            OS_ERR_PEND_LOCKED  If you called this function when the scheduler is locked
              *
              * Returns    : != (void *)0  is a pointer to the message received
              *              == (void *)0  if no message was received or,
              *                            if 'pevent' is a NULL pointer or,
              *                            if you didn't pass the proper pointer to the event control block.
              *********************************************************************************************************
              */
              /*$PAGE*/
              void  *OSMboxPend (OS_EVENT  *pevent,
                                 INT32U     timeout,
                                 INT8U     *perr)
              {
                  void      *pmsg;
              #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
              
              
              
              #ifdef OS_SAFETY_CRITICAL
                  if (perr == (INT8U *)0) {
                      OS_SAFETY_CRITICAL_EXCEPTION();
                  }
              #endif
C51 COMPILER V9.51   OS_MBOX                                                               02/25/2015 10:39:17 PAGE 9   

              
              #if OS_ARG_CHK_EN > 0u
                  if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
                      *perr = OS_ERR_PEVENT_NULL;
                      return ((void *)0);
                  }
              #endif
                  if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
                      *perr = OS_ERR_EVENT_TYPE;
                      return ((void *)0);
                  }
                  if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
                      *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
                      return ((void *)0);
                  }
                  if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
                      *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
                      return ((void *)0);
                  }
                  OS_ENTER_CRITICAL();
                  pmsg = pevent->OSEventPtr;
                  if (pmsg != (void *)0) {                          /* See if there is already a message             */
                      pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
                      OS_EXIT_CRITICAL();
                      *perr = OS_ERR_NONE;
                      return (pmsg);                                /* Return the message received (or NULL)         */
                  }
                  OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
                  OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
                  OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
                  OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
                  OS_EXIT_CRITICAL();
                  OS_Sched();                                       /* Find next highest priority task ready to run  */
                  OS_ENTER_CRITICAL();
                  switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
                      case OS_STAT_PEND_OK:
                           pmsg =  OSTCBCur->OSTCBMsg;
                          *perr =  OS_ERR_NONE;
                           break;
              
                      case OS_STAT_PEND_ABORT:
                           pmsg = (void *)0;
                          *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
                           break;
              
                      case OS_STAT_PEND_TO:
                      default:
                           OS_EventTaskRemove(OSTCBCur, pevent);
                           pmsg = (void *)0;
                          *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
                           break;
                  }
                  OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
                  OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
                  OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
              #if (OS_EVENT_MULTI_EN > 0u)
                  OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
              #endif
                  OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
                  OS_EXIT_CRITICAL();
                  return (pmsg);                                    /* Return received message                       */
              }
C51 COMPILER V9.51   OS_MBOX                                                               02/25/2015 10:39:17 PAGE 10  

              /*$PAGE*/
              /*
              *********************************************************************************************************
              *                                      ABORT WAITING ON A MESSAGE MAILBOX
              *
              * Description: This function aborts & readies any tasks currently waiting on a mailbox.  This function
              *              should be used to fault-abort the wait on the mailbox, rather than to normally signal
              *              the mailbox via OSMboxPost() or OSMboxPostOpt().
              *
              * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox.
              *
              *              opt           determines the type of ABORT performed:
              *                            OS_PEND_OPT_NONE         ABORT wait for a single task (HPT) waiting on the
              *                                                     mailbox
              *                            OS_PEND_OPT_BROADCAST    ABORT wait for ALL tasks that are  waiting on the
              *                                                     mailbox
              *
              *              perr          is a pointer to where an error message will be deposited.  Possible error
              *                            messages are:
              *
              *                            OS_ERR_NONE         No tasks were     waiting on the mailbox.
              *                            OS_ERR_PEND_ABORT   At least one task waiting on the mailbox was readied
              *                                                and informed of the aborted wait; check return value
              *                                                for the number of tasks whose wait on the mailbox
              *                                                was aborted.
              *                            OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a mailbox.
              *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
              *
              * Returns    : == 0          if no tasks were waiting on the mailbox, or upon error.
              *              >  0          if one or more tasks waiting on the mailbox are now readied and informed.
              *********************************************************************************************************
              */
              
              #if OS_MBOX_PEND_ABORT_EN > 0u
              INT8U  OSMboxPendAbort (OS_EVENT  *pevent,
                                      INT8U      opt,
                                      INT8U     *perr)
              {
                  INT8U      nbr_tasks;
              #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
              
              
              
              #ifdef OS_SAFETY_CRITICAL
                  if (perr == (INT8U *)0) {
                      OS_SAFETY_CRITICAL_EXCEPTION();
                  }
              #endif
              
              #if OS_ARG_CHK_EN > 0u
                  if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
                      *perr = OS_ERR_PEVENT_NULL;
                      return (0u);
                  }
              #endif
                  if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
                      *perr = OS_ERR_EVENT_TYPE;
                      return (0u);
                  }
                  OS_ENTER_CRITICAL();
C51 COMPILER V9.51   OS_MBOX                                                               02/25/2015 10:39:17 PAGE 11  

                  if (pevent->OSEventGrp != 0u) {                        /* See if any task waiting on mailbox?      */
                      nbr_tasks = 0u;
                      switch (opt) {
                          case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                               while (pevent->OSEventGrp != 0u) {        /* Yes, ready ALL tasks waiting on mailbox  */
                                   (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                                   nbr_tasks++;
                               }
                               break;
              
                          case OS_PEND_OPT_NONE:
                          default:                                       /* No,  ready HPT       waiting on mailbox  */
                               (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                               nbr_tasks++;
                               break;
                      }
                      OS_EXIT_CRITICAL();
                      OS_Sched();                                        /* Find HPT ready to run                    */
                      *perr = OS_ERR_PEND_ABORT;
                      return (nbr_tasks);
                  }
                  OS_EXIT_CRITICAL();
                  *perr = OS_ERR_NONE;
                  return (0u);                                           /* No tasks waiting on mailbox              */
              }
              #endif
              
              /*$PAGE*/
              /*
              *********************************************************************************************************
              *                                       POST MESSAGE TO A MAILBOX
              *
              * Description: This function sends a message to a mailbox
              *
              * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
              *
              *              pmsg          is a pointer to the message to send.  You MUST NOT send a NULL pointer.
              *
              * Returns    : OS_ERR_NONE          The call was successful and the message was sent
              *              OS_ERR_MBOX_FULL     If the mailbox already contains a message.  You can can only send one
              *                                   message at a time and thus, the message MUST be consumed before you
              *                                   are allowed to send another one.
              *              OS_ERR_EVENT_TYPE    If you are attempting to post to a non mailbox.
              *              OS_ERR_PEVENT_NULL   If 'pevent' is a NULL pointer
              *              OS_ERR_POST_NULL_PTR If you are attempting to post a NULL pointer
              *
              * Note(s)    : 1) HPT means Highest Priority Task
              *********************************************************************************************************
              */
              
              #if OS_MBOX_POST_EN > 0u
              INT8U  OSMboxPost (OS_EVENT  *pevent,
                                 void      *pmsg)
              {
              #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
              
              
              
              #if OS_ARG_CHK_EN > 0u
                  if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
C51 COMPILER V9.51   OS_MBOX                                                               02/25/2015 10:39:17 PAGE 12  

                      return (OS_ERR_PEVENT_NULL);
                  }
                  if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
                      return (OS_ERR_POST_NULL_PTR);
                  }
              #endif
                  if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
                      return (OS_ERR_EVENT_TYPE);
                  }
                  OS_ENTER_CRITICAL();
                  if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on mailbox            */
                                                                    /* Ready HPT waiting on event                    */
                      (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
                      OS_EXIT_CRITICAL();
                      OS_Sched();                                   /* Find highest priority task ready to run       */
                      return (OS_ERR_NONE);
                  }
                  if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
                      OS_EXIT_CRITICAL();
                      return (OS_ERR_MBOX_FULL);
                  }
                  pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
                  OS_EXIT_CRITICAL();
                  return (OS_ERR_NONE);
              }
              #endif
              
              /*$PAGE*/
              /*
              *********************************************************************************************************
              *                                       POST MESSAGE TO A MAILBOX
              *
              * Description: This function sends a message to a mailbox
              *
              * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
              *
              *              pmsg          is a pointer to the message to send.  You MUST NOT send a NULL pointer.
              *
              *              opt           determines the type of POST performed:
              *                            OS_POST_OPT_NONE         POST to a single waiting task
              *                                                     (Identical to OSMboxPost())
              *                            OS_POST_OPT_BROADCAST    POST to ALL tasks that are waiting on the mailbox
              *
              *                            OS_POST_OPT_NO_SCHED     Indicates that the scheduler will NOT be invoked
              *
              * Returns    : OS_ERR_NONE          The call was successful and the message was sent
              *              OS_ERR_MBOX_FULL     If the mailbox already contains a message.  You can can only send one
              *                                   message at a time and thus, the message MUST be consumed before you
              *                                   are allowed to send another one.
              *              OS_ERR_EVENT_TYPE    If you are attempting to post to a non mailbox.
              *              OS_ERR_PEVENT_NULL   If 'pevent' is a NULL pointer
              *              OS_ERR_POST_NULL_PTR If you are attempting to post a NULL pointer
              *
              * Note(s)    : 1) HPT means Highest Priority Task
              *
              * Warning    : Interrupts can be disabled for a long time if you do a 'broadcast'.  In fact, the
              *              interrupt disable time is proportional to the number of tasks waiting on the mailbox.
              *********************************************************************************************************
              */
              
              #if OS_MBOX_POST_OPT_EN > 0u
              INT8U  OSMboxPostOpt (OS_EVENT  *pevent,
C51 COMPILER V9.51   OS_MBOX                                                               02/25/2015 10:39:17 PAGE 13  

                                    void      *pmsg,
                                    INT8U      opt)
              {
              #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
                  OS_CPU_SR  cpu_sr = 0u;
              #endif
              
              
              
              #if OS_ARG_CHK_EN > 0u
                  if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
                      return (OS_ERR_PEVENT_NULL);
                  }
                  if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
                      return (OS_ERR_POST_NULL_PTR);
                  }
              #endif
                  if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
                      return (OS_ERR_EVENT_TYPE);
                  }
                  OS_ENTER_CRITICAL();
                  if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on mailbox            */
                      if ((opt & OS_POST_OPT_BROADCAST) != 0x00u) { /* Do we need to post msg to ALL waiting tasks ? */
                          while (pevent->OSEventGrp != 0u) {        /* Yes, Post to ALL tasks waiting on mailbox     */
                              (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
                          }
                      } else {                                      /* No,  Post to HPT waiting on mbox              */
                          (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
                      }
                      OS_EXIT_CRITICAL();
                      if ((opt & OS_POST_OPT_NO_SCHED) == 0u) {     /* See if scheduler needs to be invoked          */
                          OS_Sched();                               /* Find HPT ready to run                         */
                      }
                      return (OS_ERR_NONE);
                  }
                  if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
                      OS_EXIT_CRITICAL();
                      return (OS_ERR_MBOX_FULL);
                  }
                  pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
                  OS_EXIT_CRITICAL();
                  return (OS_ERR_NONE);
              }
              #endif
              
              /*$PAGE*/
              /*
              *********************************************************************************************************
              *                                        QUERY A MESSAGE MAILBOX
              *
              * Description: This function obtains information about a message mailbox.
              *
              * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
              *
              *              p_mbox_data   is a pointer to a structure that will contain information about the message
              *                            mailbox.
              *
              * Returns    : OS_ERR_NONE         The call was successful and the message was sent
              *              OS_ERR_EVENT_TYPE   If you are attempting to obtain data from a non mailbox.
              *              OS_ERR_PEVENT_NULL  If 'pevent'      is a NULL pointer
              *              OS_ERR_PDATA_NULL   If 'p_mbox_data' is a NULL pointer
              *********************************************************************************************************
C51 COMPILER V9.51   OS_MBOX                                                               02/25/2015 10:39:17 PAGE 14  

              */
              
              #if OS_MBOX_QUERY_EN > 0u
              INT8U  OSMboxQuery (OS_EVENT      *pevent,
                                  OS_MBOX_DATA  *p_mbox_data)
              {
                  INT8U       i;
                  OS_PRIO    *psrc;
                  OS_PRIO    *pdest;
              #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
                  OS_CPU_SR   cpu_sr = 0u;
              #endif
              
              
              
              #if OS_ARG_CHK_EN > 0u
                  if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
                      return (OS_ERR_PEVENT_NULL);
                  }
                  if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
                      return (OS_ERR_PDATA_NULL);
                  }
              #endif
                  if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
                      return (OS_ERR_EVENT_TYPE);
                  }
                  OS_ENTER_CRITICAL();
                  p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
                  psrc                    = &pevent->OSEventTbl[0];
                  pdest                   = &p_mbox_data->OSEventTbl[0];
                  for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
                      *pdest++ = *psrc++;
                  }
                  p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
                  OS_EXIT_CRITICAL();
                  return (OS_ERR_NONE);
              }
              #endif                                                     /* OS_MBOX_QUERY_EN                         */
              #endif                                                     /* OS_MBOX_EN                               */
 647                                                                                                                                                       
             -                                                                                

C51 COMPILATION COMPLETE.  115 WARNING(S),  44 ERROR(S)
